/*		DUDAS		
	COMPROBAR QUE TODOS LOS SIGNAL ESTÉN PUESTOS Y BIEN EN EL CÓDIGO


	// SE COMPRUEBA CON STRACE EL BLOQUEO

*/

/* Pseudocódigo de la Parte A con MutEx y Variables Condicionales */

mutex mtx;
condvar prod, cons;
int prod_count, cons_count = 0;
struct kfifo cbuffer;

void fifoproc_open(bool abre_para_lectura){
	lock(mtx);
	if(abre_para_lectura){
		cons_count++;
		cond_signal(prod, mtx); 
		while(prod_count < 1){
			cond_wait(cons, mtx);
		}
	} else {
		prod_count++;
		cond_signal(cons, mtx); 
		while(cons_count < 1){
			cond_wait(prod, mtx);
		}
	}
	unlock(mtx);
}
int fifoproc_write(char* buff, int len){
	char kbuffer[MAX_KBUF];

	if(len > MAX_CBUFFER_LENGTH || len > MAX_KBUF) { return Error; }
	if(copy_from_user(kbffer, buff, len)) { return Error; }

	lock(mtx);

		/*Esperar hasta que haya un hueco (debe haber consumidores)*/
	while(kfifo_avail(&cbuffer)<len && cons_count > 0){
		cond_wait(prod, mtx);
	}
		/*Detectar fin de comunicación por error (consumidor cierra FIFO antes*/
	if(cons_count == 0) {unlock(mtx); return -EPIPE; }

	kfifo_in(&cbuffer, kbuffer, len);

		/*Despertar posible consumidor bloqueado*/
	cond_signal(cons);

	unlock(mtx);
	return len;

}
int fifoproc_read(const char* buff, int len){
	char kbuffer[MAX_KBUF];

	if(len > MAX_CBUFFER_LENGTH || len > MAX_KBUF) { return Error; }

	lock(mtx);

		/*Esperar hasta que haya un elemento (debe haber productores)*/
	while(kfifo_len() < len && prod_count > 0){	/* O no hay hueco o los productores están procesando*/
		cond_wait(cons, mtx);
	}

		/*Detectar fin de comunicación por error (productor cierra FIFO antes)*/
	if(prod_count == 0 && kfifo_is_empty(&cbuffer)) {unlock(mtx); return -EPIPE;}

	kfifo_out(&cbuffer,kbuffer,len);

		/*Despertar posible productor bloqueado*/
	cond_signal(prod);

	unlock(mtx);


	if(len_copy_to_user(kbuffer, buff, len)) {return Error; }

	return len;
}
void fifoproc_release(bool lectura){
	lock(mtx);
	if(lectura){
		cons_cont--;
		if(kfifo_is_empty(&cbuffer))
			kfifo_reset();
		cond_signal(prod);
	} else {
		prod_count--;
		if(kfifo_is_free(&cbuffer))
			kfifo_reset();
		cond_signal(cons);
	}
	unlock(mtx);
}